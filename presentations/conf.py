#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# groundwork documentation build configuration file, created by
# sphinx-quickstart on Tue Sep 19 13:29:32 2017.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "../examples"))


# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = ['sphinxjp.themes.revealjs',
              'sphinxcontrib.plantuml',
              'sphinx.ext.autodoc',
              'sphinx.ext.inheritance_diagram',
              'sphinxcontrib.programoutput',
              'sphinxcontrib.sadisp',
              'sphinxcontrib.needs']


# Adds custom css to remove some annoying revealjs layouts.
def setup(app):
    if os.path.exists('_static/css/gw_custom.css'):
        app.add_stylesheet('css/gw_custom.css')

    else:
        print("Missing _static/css/gw_custom.css")
        sys.exit()
    try:
        app.add_stylesheet('css/pygments_vim.css')
    except Exception:
        pass

# PLANTUML config
cwd = os.getcwd()
plantuml = 'java -jar %s' % os.path.join(cwd, "utils/plantuml.jar")


# If we are running on windows, we need to manipulate the path,
# otherwise plantuml will have problems.
if os.name == "nt":
    plantuml = plantuml.replace("/", "\\")
    plantuml = plantuml.replace("\\", "\\\\")

plantuml = plantuml.split()  # split needed for sadisplay
plantuml_output_format = 'png'

needs_types = [
    dict(directive="story", title="User Story", prefix="US_", color="#BFD8D2", style="node"),
    dict(directive="spec", title="Specification", prefix="SP_", color="#FEDCD2", style="node"),
    dict(directive="test", title="Test Case", prefix="TC_", color="#DCB239", style="node")
]

needs_css = "dark.css"

# SADISPLAY config
graphviz = 'dot -Tpng'.split()
sadisplay_default_render = 'plantuml'

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = 'Documentation without Frustration'
copyright = '2017, team useblocks'
author = 'team useblocks'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '1.0'
# The full version, including alpha/beta/rc tags.
release = '1.0'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = ['slides', '_build', 'Thumbs.db', '.DS_Store']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = False


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'revealjs'
html_use_index = False

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
html_theme_options = {
    # The "normal" size of the presentation, aspect ratio will be preserved
    # when the presentation is scaled to fit different resolutions
    "width": 1500,
    "height": 900,

    # Factor of the display size that should remain empty around the content
    "margin": 0.05,

    # Bounds for smallest/largest possible scale to apply to content
    "min_scale": 0.2,
    "max_scale": 2.0,

    # Hides the address bar on mobile devices
    "hide_address_bar": True,
}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# This is required for the alabaster theme
# refs: http://alabaster.readthedocs.io/en/latest/installation.html#sidebars
html_sidebars = {
    '**': [
        'about.html',
        'navigation.html',
        'relations.html',  # needs 'show_related': True theme option to display
        'searchbox.html',
        'donate.html',
    ]
}


# -- Options for HTMLHelp output ------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'documentationwithoutfrustrationdoc'


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'Documentation without Frustration.tex', 'Documentation without Frustration Documentation',
     'team useblocks', 'manual'),
]


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'Documentation without Frustration', 'Documentation without Frustration Documentation',
     [author], 1)
]


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'Documentation without Frustration', 'Documentation without Frustration Documentation',
     author, 'Documentation without Frustration', 'One line description of project.',
     'Miscellaneous'),
]
